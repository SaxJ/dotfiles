# init plugin manager
source "%val{config}/bundle/kak-bundle/rc/kak-bundle.kak"
bundle-noload kak-bundle https://github.com/jdugan6240/kak-bundle

# helpers
def suspend-and-resume \
    -params 1..2 \
    -docstring 'suspend-and-resume <cli command> [<kak command after resume>]: backgrounds current kakoune client and runs specified cli command.  Upon exit of command the optional kak command is executed.' \
    %{ evaluate-commands %sh{

    # Note we are adding '&& fg' which resumes the kakoune client process after the cli command exits
    cli_cmd="$1 && fg"
    post_resume_cmd="$2"

		automate_cmd="sleep 0.2; zellij ac write-chars '$cli_cmd'; zellij ac write 13;"

    # Uses platforms automation to schedule the typing of our cli command
    nohup sh -c "$automate_cmd"  > /dev/null 2>&1 &
    # Send kakoune client to the background
    $kill_cmd -SIGTSTP $kak_client_pid

    # ...At this point the kakoune client is paused until the " && fg " gets run in the $automate_cmd

    # Upon resume, run the kak command is specified
    if [ ! -z "$post_resume_cmd" ]; then
        echo "$post_resume_cmd"
    fi
}}

# general
set global indentwidth 2
set global ui_options terminal_assistant=none
set global tabstop 2
set global indentwidth 2

# general highlighters
add-highlighter global/git-diff flag-lines Default git_diff_flags
add-highlighter global/number-lines number-lines -hlcursor -relative
add-highlighter global/hl-col-120 column 120 default,black+d

# better grep
set-option global grepcmd 'rg --column --smart-case --sort path'

# swiper
bundle swiper https://github.com/hadronized/swiper.kak %{
  set-option global swiper_cmd 'rg -in'
  set-option global swiper_reduce_cmd 'rg -i'
  set-face global Swiper green+r
}

bundle wakatime https://github.com/WhatNodyn/kakoune-wakatime %{
}

# git
declare-option str git_branch_name %sh{
  git branch --show-current
}

def tig-blame -override -docstring 'Open blame in tig for current file and line' %{
    # Note here we aren't passing any command on resume of kakoune
    suspend-and-resume "tig blame +%val{cursor_line} %val{buffile}" 
}

def git-open -override -docstring 'Open git interface' %{
  nop %sh{
    zellij run -cf -- lazygit
  }
}

def project-open -override -docstring 'Open project searcher' %{
  nop %sh{
    zellij run -cf -- prj
  }
}

# window management in zellij
define-command -hidden zellij-split -params 1 -docstring 'split (down / right)' %{
  nop %sh{
    zellij action new-pane -cd $1 -- kak -c $kak_session
  }
}

define-command -hidden zellij-move-focus -params 1 %{
  nop %sh{
    zellij action move-focus $1
  }
}

declare-user-mode window-zellij
map global window-zellij Q ':q!<ret>'                  -docstring 'close window (force)'
map global window-zellij q ':q<ret>'                   -docstring 'close window'
map global window-zellij h ':zellij-move-focus left<ret>' -docstring 'move left'
map global window-zellij j ':zellij-move-focus down<ret>' -docstring 'move down'
map global window-zellij k ':zellij-move-focus up<ret>' -docstring 'move up'
map global window-zellij l ':zellij-move-focus right<ret>' -docstring 'move right'
map global window-zellij h ':zellij-split down<ret>'       -docstring 'horizontal split'
map global window-zellij v ':zellij-split right<ret>'       -docstring 'vertical split'

## match mode
define-command -hidden match-delete-surround -docstring 'delete surrounding key' %{
  on-key %{
    match-delete-surround-key %val{key}
  }
}

define-command -hidden match-delete-surround-key -params 1 %{
  execute-keys -draft "<a-a>%arg{1}i<del><esc>a<backspace><esc>"
}

## surround mode
define-command surround-key -docstring 'surround key' %{
  on-key %{
    add-surrounding-pair %val{key} %val{key}
  }
}

define-command surround-tag -docstring 'surround tag' %{
  prompt surround-tag: %{
    add-surrounding-pair "<%val{text}>" "</%val{text}>"
  }
}
    
define-command -override add-surrounding-pair -params 2 -docstring 'add surrounding pairs left and right to selection' %{
  evaluate-commands -no-hooks -save-regs '"' %{
    set-register '"' %arg{1}
    execute-keys -draft P
    set-register '"' %arg{2}
    execute-keys -draft p
  }
}

define-command surround-replace -docstring 'prompt for a surrounding pair and replace it with another' %{
  on-key %{
    surround-replace-sub %val{key}
  }
}

define-command -hidden surround-replace-sub -params 1 %{
	on-key %{
    evaluate-commands -no-hooks -draft %{
      execute-keys "<a-a>%arg{1}"

      # select the surrounding pair and add the new one around it
      enter-user-mode surround-add
      execute-keys %val{key}
    }

    # delete the old one
    match-delete-surround-key %arg{1}
	}
}

declare-user-mode match
map global match a '<a-a>'                               -docstring 'match around'
map global match d ':match-delete-surround<ret>'         -docstring 'delete surround'
map global match i '<a-i>'                               -docstring 'match inside'
map global match m m                                     -docstring 'select other matching delimiter'
map global match s ':enter-user-mode surround-add<ret>'  -docstring 'add surrounding pairs'
map global match r ':surround-replace<ret>'              -docstring 'replace surrounding pairs'

declare-user-mode match-extend
map global match-extend a '<A-a>'                        -docstring 'extend around'
map global match-extend i '<A-i>'                        -docstring 'extend inside'
map global match-extend m M                              -docstring 'extend other matching delimiter'

# surround-add mode; support most of the useful delimiters
declare-user-mode surround-add
map global surround-add "'" ":add-surrounding-pair ""'"" ""'""<ret>" -docstring 'surround selections with quotes'
map global surround-add ' ' ':add-surrounding-pair " " " "<ret>'     -docstring 'surround selections with pipes'
map global surround-add '"' ':add-surrounding-pair ''"'' ''"''<ret>' -docstring 'surround selections with double quotes'
map global surround-add '(' ':add-surrounding-pair ( )<ret>'         -docstring 'surround selections with curved brackets'
map global surround-add ')' ':add-surrounding-pair ( )<ret>'         -docstring 'surround selections with curved brackets'
map global surround-add '*' ':add-surrounding-pair * *<ret>'         -docstring 'surround selections with stars'
map global surround-add '<' ':add-surrounding-pair <lt> <gt><ret>'   -docstring 'surround selections with chevrons'
map global surround-add '>' ':add-surrounding-pair <lt> <gt><ret>'   -docstring 'surround selections with chevrons'
map global surround-add '[' ':add-surrounding-pair [ ]<ret>'         -docstring 'surround selections with square brackets'
map global surround-add ']' ':add-surrounding-pair [ ]<ret>'         -docstring 'surround selections with square brackets'
map global surround-add '_' ':add-surrounding-pair "_" "_"<ret>'     -docstring 'surround selections with underscores'
map global surround-add '{' ':add-surrounding-pair { }<ret>'         -docstring 'surround selections with angle brackets'
map global surround-add '|' ':add-surrounding-pair | |<ret>'         -docstring 'surround selections with pipes'
map global surround-add '}' ':add-surrounding-pair { }<ret>'         -docstring 'surround selections with angle brackets'
map global surround-add '«' ':add-surrounding-pair « »<ret>'         -docstring 'surround selections with French chevrons'
map global surround-add '»' ':add-surrounding-pair « »<ret>'         -docstring 'surround selections with French chevrons'
map global surround-add '“' ':add-surrounding-pair “ ”<ret>'         -docstring 'surround selections with French chevrons'
map global surround-add '”' ':add-surrounding-pair “ ”<ret>'         -docstring 'surround selections with French chevrons'
map global surround-add ` ':add-surrounding-pair ` `<ret>'           -docstring 'surround selections with ticks'
map global surround-add t ':surround-tag<ret>'                       -docstring 'surround selections with a <tag>'

## Some pickers
define-command -hidden open_buffer_picker %{
  prompt buffer: -menu -buffer-completion %{
    buffer %val{text}
  }
}

define-command -hidden open_file_picker %{
  prompt file: -menu -shell-script-candidates 'fd --type=file' %{
    edit -existing %val{text}
  }
}

define-command file-picker %{
  try %{
    edit -scratch '*file-picker*'

    map buffer normal <ret> 'x_gf'
    add-highlighter buffer/file-picker-item regex (.*) 1:cyan
    set-option buffer swiper_callback 'x_gf'

    execute-keys '|fd --type=file<ret>gg'
  }
}

define-command -hidden open_rg_picker %{
  prompt search: %{
    prompt refine: -menu -shell-script-candidates "rg -in --column '%val{text}'" %{
      evaluate-commands "edit -existing %sh{
        IFS=':' read -r file line column rest <<< ""$kak_text""
        echo \""$file\"" $line $column
      }"
    }
  }
}

## yank mode
define-command extra-yank-buffile -docstring 'yank the path of the current buffer' %{
  set-register p %val{buffile}
}

declare-option str extra_yank_system_clipboard_cmd %sh{
  echo 'wl-copy'
}

declare-option str extra_paste_system_clipboard_cmd %sh{
  echo 'wl-paste'
}

define-command extra-yank-system -docstring 'yank into the system clipboard' %{
  execute-keys -draft "<a-!>%opt{extra_yank_system_clipboard_cmd}<ret>"
}

define-command extra-paste-system -docstring 'paste from the system clipboard' %{
  execute-keys -draft "!%opt{extra_paste_system_clipboard_cmd}<ret>"
}

map global user p ':extra-paste-system<ret>' -docstring 'paste selections from system clipboard'
map global user y ':extra-yank-system<ret>'  -docstring 'yank to system clipboard'

# Tree-sitter
eval %sh{ kak-tree-sitter -dks --with-text-objects --session $kak_session -vvvvv }
colorscheme catppuccin_macchiato

# Modeline
set-face global StatusLineBlack black
set-face global StatusLineGit "%opt{red}"

declare-option str bufname_abbrev

define-command -hidden update-bufname-abbrev %{
  set-option window bufname_abbrev %sh{
    if (( ${#kak_bufname} > $((kak_window_width / 3)) )); then
      sed "s:\([^/]\)[^/]*/:\1/:g" <<< $kak_bufname
    else
      echo $kak_bufname
    fi
  }
}

hook global -group bufname-abbrev WinDisplay .* update-bufname-abbrev
hook global -group bufname-abbrev WinResize .* update-bufname-abbrev

declare-option str modeline_swiper ''

hook global WinSetOption (swiper_enabled=true|swiper_terms=.+) %{
  set-option buffer modeline_swiper "swiper (%opt{swiper_terms})"
}

hook global WinSetOption swiper_enabled=false %{
  set-option buffer modeline_swiper ''
}

set-option global modelinefmt '{DiagnosticError} %opt{lsp_diagnostic_error_count} {DiagnosticWarning} %opt{lsp_diagnostic_warning_count} {DiagnosticInfo} %opt{lsp_diagnostic_info_count} {DiagnosticHint} %opt{lsp_diagnostic_hint_count} {StatusLineGit}%opt{git_branch_name} {Swiper}%opt{modeline_swiper}{StatusLine} %opt{bufname_abbrev} {StatusLineBlack}(%val{cursor_line}:%val{cursor_char_column} {StatusLineBlack}%val{buf_line_count}L){{context_info}} {{mode_info}} {ts_comment}%val{client}@[%val{session}]'

# LSP

eval %sh{ kak-lsp --kakoune -s $kak_session }

## common options
lsp-auto-signature-help-enable
set-option global lsp_hover_anchor true
set-option global lsp_auto_show_code_actions true

## main hook for languages
hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp|php) %{
  lsp-enable-window

  lsp-diagnostic-lines-disable window
  lsp-inline-diagnostics-disable window
  lsp-inlay-diagnostics-enable window
  lsp-inlay-hints-enable window
  lsp-inlay-code-lenses-enable window

  hook window BufWritePre .* lsp-formatting-sync
  #hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
  #hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
  #hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
  #hook -once -always window WinSetOption filetype=.* %{
  #    remove-hooks window semantic-tokens
  #}
}

# Progress report
declare-option -hidden str lsp_modeline_progress ""
define-command -hidden -params 6 -override lsp-handle-progress %{
    set-option global lsp_modeline_progress %sh{
        if ! "$6"; then
            echo "$2${5:+" ($5%)"}${4:+": $4"}"
        fi
    }
}

####### Keybindings ########

## pickers
map global user / ':grep '                   -docstring 'grep'
map global user b ':open_buffer_picker<ret>' -docstring 'pick buffer'
map global user f ':open_file_picker<ret>'   -docstring 'pick file'
map global user F ':open_rg_picker<ret>'     -docstring 'search project'

## match
map global normal M ':enter-user-mode match-extend<ret>' -docstring 'match mode (extend)'
map global normal m ':enter-user-mode match<ret>'        -docstring 'match mode'

## windows
map global normal <c-w> ':enter-user-mode window-zellij<ret>' -docstring 'window'

## LSP
declare-user-mode user-lsp
map global user l ':enter-user-mode user-lsp<ret>'      -docstring 'lsp mode'
map global user-lsp a ':lsp-code-actions<ret>'          -docstring 'code action'
map global user-lsp c ':lsp-code-lens<ret>'             -docstring 'execute code lens'
map global user-lsp d ':lsp-diagnostics<ret>'           -docstring 'list diagnostics'
map global user-lsp h ':lsp-highlight-references<ret>'  -docstring 'highlight references'
map global user-lsp I ':lsp-implementation<ret>'        -docstring 'list implementations'
map global user-lsp i ':lsp-incoming-calls<ret>'        -docstring 'incoming calls'
map global user-lsp K ':lsp-hover-buffer<ret>'          -docstring 'hover in a dedicated buffer'
map global user-lsp k ':lsp-hover<ret>'                 -docstring 'hover'
map global user-lsp l ':lsp-code-lens<ret>'             -docstring 'run a code lens'
map global user-lsp ) ':lsp-next-function<ret>'         -docstring 'jump to the next function'
map global user-lsp ( ':lsp-previous-function<ret>'     -docstring 'jump to the previous function'
map global user-lsp o ':lsp-outgoing-calls<ret>'        -docstring 'outgoing calls'
map global user-lsp p ':lsp-workspace-symbol-incr<ret>' -docstring 'pick workspace symbol'
map global user-lsp P ':lsp-workspace-symbol<ret>'      -docstring 'list workspace symbols'
map global user-lsp r ':lsp-references<ret>'            -docstring 'list references'
map global user-lsp R ':lsp-rename-prompt<ret>'         -docstring 'rename'
map global user-lsp S ':lsp-document-symbol<ret>'       -docstring 'list workspace symbols'
map global user-lsp s ':lsp-goto-document-symbol<ret>'  -docstring 'pick document symbol'
map global user-lsp x ':lsp-find-error<ret>'            -docstring 'jump to the prev/next error'

hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
        hook -once -always window InsertCompletionHide .* %{
            unmap window insert <tab> <c-n>
            unmap window insert <s-tab> <c-p>
        }
    }
}

declare-user-mode git
map global user g ':enter-user-mode git<ret>' -docstring 'git mode'
map global git b ':tig-blame<ret>' -docstring 'git blame'
map global git g ':git-open<ret>' -docstring 'lazygit'

declare-user-mode tig
map global tig b ': tig-blame<ret>' -docstring 'show blame (with tig)'
map global tig s ': suspend-and-resume "tig status"<ret>' -docstring 'show git status (with tig)'
map global tig m ': suspend-and-resume "tig"<ret>' -docstring 'show main view (with tig)'

map global user t ': enter-user-mode tig<ret>' -docstring 'tig commands'
